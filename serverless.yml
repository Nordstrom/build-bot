service: build-bot
provider:
  name: aws
  runtime: nodejs4.3
  region: us-west-2

# Resources
resources:  // CloudFormation template syntax
  Resources:
    stateTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Hackanthon-Hal-BOT
        AttributeDefinitions:
          - AttributeName: repo
            AttributeType: S
        KeySchema:
          - AttributeName: repo
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  deploy:
    handler: src/bot.handle
    memorySize: 512 # memorySize for this specific function.
    timeout: 10 # Timeout for this specific function.  Overrides the default set above.

    events:
      - http:
          path: bot/events
          method: post

    # role: arn:aws:iam::XXXXXX:role/role # IAM role which which will be used for this function
    # environment: # Function level environment variables
    #   functionEnvVar: 12345678
    # events: # The Events that trigger this Function
    #   - http: # This creates an API Gateway HTTP endpoint which can be used to trigger this function.  Learn more in "events/apigateway"
    #       path: users/create # Path for this endpoint
    #       method: get # HTTP method for this endpoint
    #       cors: true # Turn on CORS for this endpoint, but don't forget to return the right header in your response
    #       private: true # Requires clients to add API keys values in the `x-api-key` header of their request
    #       authorizer: # An AWS API Gateway custom authorizer function
    #         name: authorizerFunc # The name of the authorizer function (must be in this service)
    #         arn:  xxx:xxx:Lambda-Name # Can be used instead of name to reference a function outside of service
    #         resultTtlInSeconds: 0
    #         identitySource: method.request.header.Authorization
    #         identityValidationExpression: someRegex
